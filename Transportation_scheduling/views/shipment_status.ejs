<!-- views/transporter.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transporter Dashboard</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .table-container {
            max-height: 70vh;
            overflow-y: auto;
        }
        .table-header {
            position: sticky;
            top: 0;
            background-color: #1f2937;
            z-index: 10;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Header -->
    <header class="bg-gray-800 text-white p-4">
        <div class="container mx-auto">
            <h1 class="text-2xl font-bold">Transporter Dashboard</h1>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto mt-6 px-4">
        <div class="bg-white rounded-lg shadow-md p-6">
            <!-- Search Input -->
            <div class="mb-4">
                <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search by Name or Confirmation ID..." 
                    class="w-full max-w-md p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
            </div>

            <!-- Processes Table -->
            <div class="table-container">
                <table class="w-full text-left">
                    <thead class="table-header text-white">
                        <tr>
                            <th class="p-3">Confirmation ID</th>
                            <th class="p-3">Name</th>
                            <th class="p-3">Action</th>
                            <th class="p-3">Feedback</th>
                        </tr>
                    </thead>
                    <tbody id="processTable" class="divide-y divide-gray-200">
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- JavaScript -->
    <script>
        // Fetch processes from backend
        async function fetchProcesses() {
            try {
                const response = await fetch('/api/processes'); // Adjust this endpoint as needed
                if (!response.ok) throw new Error('Network response was not ok');
                const processes = await response.json();
                return processes;
            } catch (error) {
                console.error('Error fetching processes:', error);
                return [];
            }
        }

        // Display processes in table
        function displayProcesses(processes) {
            const tableBody = document.getElementById('processTable');
            tableBody.innerHTML = '';

            processes.forEach(process => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                row.innerHTML = `
                    <td class="p-3">${process.confirmationId}</td>
                    <td class="p-3">${process.Name}</td>
                    <td class="p-3">${process.Action}</td>
                    <td class="p-3">
                        <a 
                            href="/transporter-feedback?confirmationId=${process.confirmationId}" 
                            class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                        >
                            See Feedback
                        </a>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Filter processes
        function filterProcesses(processes, searchTerm) {
            return processes.filter(process => {
                const searchLower = searchTerm.toLowerCase();
                return process.Name.toLowerCase().includes(searchLower) || 
                       process.confirmationId.toLowerCase().includes(searchLower);
            });
        }

        // Initialize page
        async function init() {
            const processes = await fetchProcesses();
            displayProcesses(processes);

            // Search functionality
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', async () => {
                const allProcesses = await fetchProcesses();
                const filteredProcesses = filterProcesses(allProcesses, searchInput.value);
                displayProcesses(filteredProcesses);
            });
        }

        // Start when page loads
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>